defmodule ExIbus.MessageTest do
  use ExUnit.Case

  doctest ExIbus.Message
  alias ExIbus.Message

  test "raw() have to add length and xor" do
    msg = %Message{src: <<0x68>>, dst: <<0x18>>, msg: <<0x0A, 0x00>>}
    assert Message.raw(msg) == <<0x68, 0x04, 0x18, 0x0A, 0x00, 0x7E>>
  end

  test "valid?() should validate correct messages" do
    assert Message.valid?(<<0x68, 0x04, 0x18, 0x0A, 0x00, 0x7E>>)
    refute Message.valid?(<<0x68, 0x04, 0x18, 0x0A, 0x00, 0x7A>>)
    refute Message.valid?(<<0x68, 0x05, 0x18, 0x0A, 0x00, 0x7E>>)
  end

  test "parse() should create a valid message" do
    {:ok, _} = Message.parse(<<0x68, 0x04, 0x18, 0x0A, 0x00, 0x7E>>)
    {:error, _} = Message.parse(<<0x68, 0x04, 0x18, 0x0A, 0x00, 0x7A>>)
    {:error, _} = Message.parse(<<0x68, 0x05, 0x18, 0x0A, 0x00, 0x7E>>)
  end
end
